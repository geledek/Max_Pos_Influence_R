source("http://sna.stanford.edu/setup.R")
getwd()
setwd("Documents/PhD study/data mining/data_mining_project/")
ls
LR_CV = [0.0158791232354 0.989596337911
0.0157262880538 0.990428630878
0.0159874915968 0.989596337911
0.0124018875846 0.992925509779
0.0138254056553 0.990012484395]
LR_CV = c(0.0158791232354,0.989596337911,0.0157262880538, 0.990428630878,0.0159874915968, 0.989596337911,0.0124018875846, 0.992925509779,0.0138254056553, 0.990012484395)
LR_CV
LR_CV = c(0.0158791232354, 0.989596337911,
0.0157262880538, 0.990428630878,
0.0159874915968, 0.989596337911,
0.0124018875846, 0.992925509779,
0.0138254056553, 0.990012484395)
LR_CV
as.matrix(1,2,3)
as.matrix(LR_CV,2)
as.matrix(LR_CV,2,5)
as.matrix(LR_CV,5,2)
?as.matrix
LR_CV = matrix(c(0.0158791232354, 0.989596337911,
0.0157262880538, 0.990428630878,
0.0159874915968, 0.989596337911,
0.0124018875846, 0.992925509779,
0.0138254056553, 0.990012484395),5,2)
LR_CV
read.csv("LogisticRegression.csv",sep = " ")
read.csv("LogisticRegression.csv",sep = " ")
LR_CV = read.csv("LogisticRegression.csv",sep = " ")
LR_CV
LR_CV[1]
LR_CV = as.matrix(LR_CV,5,2)
LR_CV
LR_CV[1] * 2
LR_CV = read.csv("LogisticRegression.csv",sep = " ")
LR_CV
LR_CV = read.csv("LogisticRegression.csv")
LR_CV
LR_CV = read.csv("LogisticRegression.csv",sep = "  ")
LR_CV = read.csv("LogisticRegression.csv",sep = ",")
LR_CV
LR_CV = read.csv("LogisticRegression.csv",sep = ",")
LR_CV = read.csv("LogisticRegression.csv",sep = " ")
LR_CV
read.csv("LogisticRegression.csv",sep = " ")
read.csv("LogisticRegression.csv",sep = ",")
read.csv("LogisticRegression.csv",sep = ",")
read.csv("LogisticRegression.csv",sep = ",")
LR_CV = read.csv("LogisticRegression.csv",sep = ",")
LR_CV[1]
LR_CV = read.csv("LogisticRegression.csv",sep = ",", header = FALSE)
LR_CV[1]
SVM_CV = read.csv("SVC.csv",sep = ",", header = FALSE)
SVM_CV
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVCnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
rm(ls = list())
rm(list= ls())
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
setwd("~/Documents/PhD study/distributed systems/OSN/Max_Pos_Influence_R/")
source('~/Documents/PhD study/distributed systems/OSN/Max_Pos_Influence_R/functions.R')
g <- InitiateGraph()
E(g)
?graph.edgelist
el <- read.csv(file.choose(), sep=" ")
el[,1] <- as.character(el[,1])
el[,2] <- as.character(el[,2])
el <- as.matrix(el)
g <- graph.edgelist(el[1:100,1:2],directed = FALSE)
# Edge Weight
E(g)$w <- as.numeric(runif(length(E(g)),min=0,max=1))
E(g)$w = E(g)$w / strength(g, mode = "in",weights = E(g)$w)[get.edgelist(g)[,2]] #Normalize only the incoming edge
E(g)
el <- read.csv(file.choose(), sep=" ")
el[,1] <- as.character(el[,1])
el[,2] <- as.character(el[,2])
el <- as.matrix(el)
g <- graph.edgelist(el[1:100,1:2],directed = FALSE)
as.directed(g,mode = "mutual")
E(g)
g <-as.directed(g,mode = "mutual")
E(g)
g <- as.directed(graph.edgelist(el[1:100,1:2],directed = FALSE),mode = "mutual")
g
E(g)
PlotPreConfig(g)
message("Greedy")
Greedy(g, 10)
source("functions.R")
source("greedy.R")
source("greedy_plus.R")
g <- InitiateGraph()
PlotPreConfig(g)
message("Greedy")
Greedy(g, 10)
message("Greedy_plus")
message("Greedy_plus")
GreedyPlus(g,10)
source("functions.R")
source("greedy.R")
source("greedy_plus.R")
source("ovm_select.R")
g <- InitiateGraph(50) # pass number of edges as argument
g <- InitiateGraph() # pass number of edges as argument
E(g)[to(i)
]
E(g)[to(1)]
E(g)[to(2)]
View(enqueue.queue)
sum(E(g)[to(1)])
source("functions.R")
g <- InitiateGraph() # pass number of edges as argument
V(g)$influenced
E(g)[to(1)]
size(E(g)[to(1)])
dim(E(g)[to(1)])
length(E(g)[to(1)])
V(g)[nei(v, mode="out")]
V(g)[nei(1, mode="out")]
E(g)[to(1)]
E(g)[from(1)]
source("functions.R")
source("max_influence.R")
max_influence(g,10)
S
S = c(43,71,11,48,58,63,87, 3,110, 17)
S
Trial(g,S)
source("greedy.R")
Greedy(g, 10)
setwd("../../../data mining/data_mining_project/")
=
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVMnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
mean_LR = mean(CV_LR);
mean_SVM = mean(CV_SVM);
mean_LRnaive = mean(CV_LRnaive);
mean_SVMnaive = mean(CV_SVMnaive);
?mean
CV_LR
CV_LR[1,:]
CV_LR(1,:)
CV_LR[1]
CV_LR[1,]
EL_LR = mean(CV_LR[1,]);
EL_LR
EL_LR = mean(as.numeric(CV_LR[1,]));
EL_LR
AC_LR = mean(as.numeric(CV_LR[2,]));
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVMnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
EL_LR = mean(as.numeric(CV_LR[1,]));
AC_LR = mean(as.numeric(CV_LR[2,]));
EL_SVM = mean(as.numeric(CV_SVM[1,]));
AC_SVM = mean(as.numeric(CV_SVM[2,]));
EL_LRNaive = mean(as.numeric(CV_LRnaive[1,]));
AC_LRNaive = mean(as.numeric(CV_LRnaive[2,]));
EL_SVMnaive = mean(as.numeric(CV_SVMnaive[1,]));
AC_SVMnaive = mean(as.numeric(CV_SVMnaive[2,]));
EL_NB = mean(as.numeric(CV_NB[1,]));
AC_LNB = mean(as.numericCV_NB[2,]));
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVMnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
EL_LR = mean(as.numeric(CV_LR[1,]));
AC_LR = mean(as.numeric(CV_LR[2,]));
EL_SVM = mean(as.numeric(CV_SVM[1,]));
AC_SVM = mean(as.numeric(CV_SVM[2,]));
EL_LRNaive = mean(as.numeric(CV_LRnaive[1,]));
AC_LRNaive = mean(as.numeric(CV_LRnaive[2,]));
EL_SVMnaive = mean(as.numeric(CV_SVMnaive[1,]));
AC_SVMnaive = mean(as.numeric(CV_SVMnaive[2,]));
EL_NB = mean(as.numeric(CV_NB[1,]));
AC_NB = mean(as.numeric(CV_NB[2,]));
rm(AC_LRNaive)
rm(AC_NB)
clear(ls = list())
clear(list = ls())
rm(list = ls())
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVMnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
EL_LR = mean(as.numeric(CV_LR[1,]));
AC_LR = mean(as.numeric(CV_LR[2,]));
EL_SVM = mean(as.numeric(CV_SVM[1,]));
AC_SVM = mean(as.numeric(CV_SVM[2,]));
EL_LRNaive = mean(as.numeric(CV_LRnaive[1,]));
AC_LRNaive = mean(as.numeric(CV_LRnaive[2,]));
EL_SVMnaive = mean(as.numeric(CV_SVMnaive[1,]));
AC_SVMnaive = mean(as.numeric(CV_SVMnaive[2,]));
EL_NB = mean(as.numeric(CV_NB[1,]));
AC_NB = mean(as.numeric(CV_NB[2,]));
AC_NB
CV_NB
CV_LR
CV_SVM
CV_SVMnaive
CV_LRnaive
CV_NB
CV_NB[0,0]
CV_NB[1,1]
CV_NB = rbind(CV_NB[1,6:10],CV_NB[2,1:5])
CV_NB[1,6:10]
CV_NB[2,1:5]
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVMnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
EL_LR = mean(as.numeric(CV_LR[1,]));
AC_LR = mean(as.numeric(CV_LR[2,]));
EL_SVM = mean(as.numeric(CV_SVM[1,]));
AC_SVM = mean(as.numeric(CV_SVM[2,]));
EL_LRNaive = mean(as.numeric(CV_LRnaive[1,]));
AC_LRNaive = mean(as.numeric(CV_LRnaive[2,]));
EL_SVMnaive = mean(as.numeric(CV_SVMnaive[1,]));
AC_SVMnaive = mean(as.numeric(CV_SVMnaive[2,]));
EL_NB = mean(as.numeric(CV_NB[1,6:10]));
AC_NB = mean(as.numeric(CV_NB[2,1:5]));
EL = c(EL_LR, EL_SVM, EL_LRNaive, EL_SVMnaive, EL_NB);
AC = c(AC_LR, AC_SVM, AC_LRNaive, aAC_SVMnaive, AC_NB);
AC = c(AC_LR, AC_SVM, AC_LRNaive, AC_SVMnaive, AC_NB);
EL
AC
EL_CV = c(EL_LR, EL_SVM, EL_LRNaive, EL_SVMnaive, EL_NB);
AC_CV = c(AC_LR, AC_SVM, AC_LRNaive, AC_SVMnaive, AC_NB);
EL_CV
testing = read.csv("testing_data.csv",sep=",",header = FALSE);
testing
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
CV_NB
raw <- read.csv("http://pastebin.com/raw.php?i=L8cEKcxS",sep=",")
raw[,2]<-factor(raw[,2],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,3]<-factor(raw[,3],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw[,4]<-factor(raw[,4],levels=c("Very Bad","Bad","Good","Very Good"),ordered=FALSE)
raw=raw[,c(2,3,4)] # getting rid of the "people" variable as I see no use for it
freq=table(col(raw), as.matrix(raw)) # get the counts of each factor level
raw
freq
Names=c("Food","Music","People")
data=data.frame(cbind(freq),Names)
data
data=data[,c(5,3,1,2,4)]
data
data.m <- melt(data, id.vars='Names')
install.packages("reshape2")
data.m <- melt(data, id.vars='Names')
install.packages("reshpe")
install.packages("reshape")
data.m <- melt(data, id.vars='Names')
library(reshape)
data.m <- melt(data, id.vars='Names')
data
data.m
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
library(ggplot2)
ggplot(data.m, aes(Names, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
CV_LR = read.csv("LogisticRegression.csv",sep = ",", header = FALSE);
CV_SVM = read.csv("SVC.csv",sep = ",", header = FALSE);
CV_LRnaive = read.csv("LR_naive.csv",sep=",",header = FALSE);
CV_SVMnaive = read.csv("SVC_naive.csv",sep=",",header = FALSE);
CV_NB = read.csv("Bayes_naive.csv",sep=",",header = FALSE);
testing = read.csv("testing_data.csv",sep=",",header = FALSE);
EL_LR = mean(as.numeric(CV_LR[1,]));
AC_LR = mean(as.numeric(CV_LR[2,]));
EL_SVM = mean(as.numeric(CV_SVM[1,]));
AC_SVM = mean(as.numeric(CV_SVM[2,]));
EL_LRNaive = mean(as.numeric(CV_LRnaive[1,]));
AC_LRNaive = mean(as.numeric(CV_LRnaive[2,]));
EL_SVMnaive = mean(as.numeric(CV_SVMnaive[1,]));
AC_SVMnaive = mean(as.numeric(CV_SVMnaive[2,]));
EL_NB = mean(as.numeric(CV_NB[1,]));
AC_NB = mean(as.numeric(CV_NB[2,]));
EL_CV = c(EL_LR, EL_SVM, EL_LRNaive, EL_SVMnaive, EL_NB);
AC_CV = c(AC_LR, AC_SVM, AC_LRNaive, AC_SVMnaive, AC_NB);
EL_test = testing[1,];
AC_test = testing[2,];
names1 = c("Cross Validation", "Testing");
names2 = c("Logistic Regression in XGBoost", "SVM in XGBoost", "Logistic Regression", "SVM", "Naive Bayes");
EL_test
EL_CV
AC_CV
AC_test
data_EL = rbind(EL_CV,EL_test)
data_EL
data.m
data_EL
?ggplot
ggplot(data_EL) +
geom_bar( position = "dodge", stat="identity")
?geom_bar
ggplot(data_EL) +
geom_bar()
m0 <- matrix(NA, 4, 0)
rownames(m0)
data_EL = rbind(EL_CV,EL_test);
colnames(data_EL, do.NULL = FALSE)
colnames(m2) <- names2
data_EL = rbind(EL_CV,EL_test);
colnames(data_EL, do.NULL = FALSE)
colnames(data_EL) <- names2
data_EL
data_EL = rbind(EL_CV,EL_test);
colnames(data_EL) <- names2
data_EL
data_EL = rbind(EL_CV,EL_test);
rownames(data_EL) <- names1
colnames(data_EL) <- names2
data_AC = rbind(AC_CV,AC_test);
rownames(data_AC) <- names1;
colnames(data_AC) <- names2;
data_AC
data.m
data_EL=data.frame(cbind(data_EL),names1)
data_AC
data_EL
data_EL.m <- melt(data_EL, id.vars = "")
data_EL.m <- melt(data_EL, id.vars = "names1")
data_EL.m
data_EL
data_EL = rbind(EL_CV,EL_test);
rownames(data_EL) <- names1
colnames(data_EL) <- names2
data_EL
?ggplot
data.m
geom_bar(aes(fill = Cross Validation), position = "dodge", stat="identity")
ggplot(data_EL,aes(models, Entropy loss)) +
geom_bar(aes(fill = Cross Validation), position = "dodge", stat="identity")
ggplot(data_EL,aes(models, Entropyloss)) +
geom_bar(aes(fill = CrossValidation), position = "dodge", stat="identity")
names1 = c("CrossValidation", "Testing");
names2 = c("Logistic Regression in XGBoost", "SVM in XGBoost", "Logistic Regression", "SVM", "Naive Bayes");
data_EL = rbind(EL_CV,EL_test);
rownames(data_EL) <- names1
colnames(data_EL) <- names2
data_AC = rbind(AC_CV,AC_test);
rownames(data_AC) <- names1;
colnames(data_AC) <- names2;
ggplot(data_EL,aes(models, Entropyloss)) +
geom_bar(aes(fill = CrossValidation), position = "dodge", stat="identity")
ggplot(data_EL,aes(models, Entropyloss)) +
geom_bar(aes(fill = SVM), position = "dodge", stat="identity")
data_EL = rbind(EL_CV,EL_test);
data_EL = cbind(data_EL,names1)
data_EL
data.m
data
data.m
data
data_EL = cbind(names1,data_EL)
data_EL
data_EL = rbind(EL_CV,EL_test);
data_EL = cbind(names1,data_EL)
data_EL
data.m
data_EL <- melt(data_EL, id.vars='names1')
data_EL
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data_EL, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data_EL, aes(names1, value)) +
geom_bar(aes(fill = names2), position = "dodge", stat="identity")
data_EL = rbind(EL_CV,EL_test);
colnames(data_EL) <- names2;
data_EL = cbind(names1,data_EL);
data_EL <- melt(data_EL, id.vars='names1')
data_EL
ggplot(data_EL, aes(names1, value)) +
geom_bar(aes(fill = names2), position = "dodge", stat="identity")
ggplot(data_EL, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
data_AC = rbind(AC_CV,AC_test);
colnames(data_AC) <- names2;
data_AC = cbind(names1,data_AC);
data_AC <- melt(data_AC, id.vars='names1');
ggplot(data_AC, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
data_AC = rbind(AC_CV,AC_test);
colnames(data_AC) <- names2;
data_AC = cbind(names1,data_AC);
data_AC <- melt(data_AC, id.vars='names1');
ggplot(data_AC, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity",ylim=c(0.95,1))
?geom_bar
data_AC = rbind(AC_CV,AC_test);
colnames(data_AC) <- names2;
data_AC = cbind(names1,data_AC);
data_AC <- melt(data_AC, id.vars='names1');
ggplot(data_AC, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity",ylim(0.95,1))
ggplot(data_AC, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity",ylim(c(0.95,1)))
data_AC = rbind(AC_CV,AC_test);
colnames(data_AC) <- names2;
data_AC = cbind(names1,data_AC);
data_AC <- melt(data_AC, id.vars='names1');
ggplot(data_AC, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity",ylim=c(0.95,1)))
ggplot(data_AC, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity",ylim=c(0.95,1))
ggplot(data_AC, aes(names1, value),ylim=c(0.95,1)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data_AC, aes(names1, value)) +   coord_cartesian(ylim = c(0.9, 1)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data_AC, aes(names1, value)) +   coord_cartesian(ylim = c(0.95, 1)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
ggplot(data_EL, aes(names1, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity")
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
?pfd
?pdf
pdf("accuracy_pp.pdf")
plot(g)
dev.off()
pdf("accuracy_pp.pdf",width = 8, height = 6)
plot(g)
dev.off()
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
source('~/Documents/PhD study/data mining/data_mining_project/figures.R')
max_influence(g,10)
setwd("../../distributed systems/OSN/Max_Pos_Influence_R/")
source("max_influence.R")
max_influence(g,10)
rm(list = ls())
source("functions.R")
source("max_influence.R")
g <- InitiateGraph() # pass number of edges as argument
PlotPreConfig(g)
message("Maximum influence")
max_influence(g,10)
getwget()
getwd()
cd "~/Documents/PhD study/distributed systems/OSN/Max_Pos_Influence_R/"
cd "/Documents/PhD study/distributed systems/OSN/Max_Pos_Influence_R/"
setwd("~/Documents/PhD study/distributed systems/OSN/Max_Pos_Influence_R/")
